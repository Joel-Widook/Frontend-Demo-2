const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const util = require('util');
const fetch = require('node-fetch');

const execPromise = util.promisify(exec);

// Configuraci√≥n de logs
const LOG_FILE = path.join(process.cwd(), 'webhook-deploy-logs.txt');

/**
 * Funci√≥n para escribir logs en un archivo
 * @param message Mensaje a loguear
 */
function log(message: string): void {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  
  // Escribir en el archivo de logs
  fs.appendFileSync(LOG_FILE, logMessage);
  
  // Tambi√©n mostrar en consola
  console.log(message);
}

/**
 * Ejecuta un comando y loguea su salida
 * @param command Comando a ejecutar
 * @param name Nombre descriptivo del comando
 */
async function runCommand(command: string, name: string): Promise<void> {
  log(`üöÄ Iniciando: ${name}`);
  
  try {
    const { stdout, stderr } = await execPromise(command);
    
    if (stdout) {
      log(`üìù Salida de ${name}:\n${stdout}`);
    }
    
    if (stderr) {
      log(`‚ö†Ô∏è Errores de ${name}:\n${stderr}`);
    }
    
    log(`‚úÖ Completado: ${name}`);
  } catch (error) {
    const execError = error as { message: string; stdout?: string; stderr?: string };
    log(`‚ùå Error en ${name}: ${execError.message}`);
    if (execError.stdout) log(`üìù Salida: ${execError.stdout}`);
    if (execError.stderr) log(`‚ö†Ô∏è Error detallado: ${execError.stderr}`);
    throw error;
  }
}

/**
 * Regenera las p√°ginas est√°ticas utilizando la API de revalidaci√≥n de Next.js
 */
async function regenerateStaticPages(): Promise<void> {
  log('üîÑ Iniciando regeneraci√≥n de p√°ginas est√°ticas');
  
  try {
    // Obtener todos los slugs de art√≠culos
    const { fetchAllArticleSlugs } = await import('../app/lib/api/articles');
    const slugs = await fetchAllArticleSlugs();
    
    log(`üìã Obtenidos ${slugs.length} slugs de art√≠culos para regenerar`);
    
    // P√°ginas a regenerar
    const pagesToRegenerate = [
      '/', // P√°gina principal
      '/news', // P√°gina de listado de noticias (si existe)
    ];
    
    // A√±adir p√°ginas de detalle de art√≠culos
    slugs.forEach(slug => {
      pagesToRegenerate.push(`/news/${slug}`);
    });
    
    log(`üîç Se regenerar√°n ${pagesToRegenerate.length} p√°ginas est√°ticas`);
    
    // Regenerar cada p√°gina
    for (const path of pagesToRegenerate) {
      try {
        log(`üîÑ Regenerando p√°gina: ${path}`);
        
        // Llamar al endpoint de revalidaci√≥n
        const revalidationSecret = process.env.REVALIDATION_SECRET;
        if (!revalidationSecret) {
          log('‚ö†Ô∏è No se ha configurado REVALIDATION_SECRET en las variables de entorno');
          continue;
        }
        
        const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';
        const revalidateUrl = `${baseUrl}/api/revalidate?path=${encodeURIComponent(path)}&secret=${revalidationSecret}`;
        
        log(`üí¨ Llamando al endpoint de revalidaci√≥n: ${revalidateUrl}`);
        
        const response = await fetch(revalidateUrl);
        const data = await response.json();
        
        if (response.ok && data.revalidated) {
          log(`‚úÖ P√°gina revalidada exitosamente: ${path}`);
        } else {
          log(`‚ö†Ô∏è Error al revalidar p√°gina ${path}: ${JSON.stringify(data)}`);
        }
      } catch (error) {
        log(`‚ö†Ô∏è Error regenerando p√°gina ${path}: ${error}`);
        // Continuar con las dem√°s p√°ginas aunque haya un error
      }
    }
    
    log('‚úÖ Regeneraci√≥n de p√°ginas est√°ticas completada');
    return;
  } catch (error) {
    log(`‚ùå Error durante la regeneraci√≥n de p√°ginas: ${error}`);
    throw error;
  }
}

/**
 * Funci√≥n principal que ejecuta el proceso de despliegue
 */
async function deploy(): Promise<void> {
  log('üîÑ Iniciando proceso de despliegue');
  
  try {
    // 1. Regenerar p√°ginas est√°ticas
    await regenerateStaticPages();
    
    // 2. Instalar dependencias (si es necesario)
    // await runCommand('npm install', 'Instalaci√≥n de dependencias');
    
    // 3. Construir la aplicaci√≥n (si es necesario)
    await runCommand('npm run build', 'Construcci√≥n de la aplicaci√≥n');
    
    // 4. Subir archivos a S3 (si es necesario)
    // await runCommand('ts-node scripts/upload-to-s3.ts', 'Subida a S3');
    
    log('‚úÖ Despliegue completado exitosamente');
  } catch (error) {
    log(`‚ùå El proceso de despliegue fall√≥: ${error}`);
    process.exit(1);
  }
}

// Iniciar el despliegue
deploy();
