import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

// Configuraci√≥n para Next.js
// Nota: En modo export, las rutas de API no funcionan en producci√≥n
// Este endpoint solo funcionar√° en desarrollo
export const dynamic = 'force-dynamic';
export const revalidate = 0; // No cachear

// Configuraci√≥n de logs
const LOG_FILE = path.join(process.cwd(), 'webhook-logs.txt');

/**
 * Funci√≥n para escribir logs en un archivo
 * @param message Mensaje a loguear
 */
function log(message: string): void {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  
  // Escribir en el archivo de logs
  fs.appendFileSync(LOG_FILE, logMessage);
}

// La funci√≥n runDeployScript ha sido eliminada ya que ahora usamos revalidaci√≥n nativa de Next.js

/**
 * Verifica si el webhook proviene de Strapi y tiene el token correcto
 * @param request Solicitud del webhook
 */
async function validateWebhook(request: NextRequest): Promise<boolean> {
  // Registrar todos los headers para depuraci√≥n
  const headers: Record<string, string> = {};
  request.headers.forEach((value, key) => {
    headers[key] = value;
  });
  log(`üí¨ Headers recibidos: ${JSON.stringify(headers, null, 2)}`);
  
  // Obtener el token del header (probar diferentes nombres de header)
  const token = request.headers.get('x-webhook-token') || 
                request.headers.get('webhook-token') ||
                request.headers.get('x-strapi-webhook-token') ||
                new URL(request.url).searchParams.get('token');
  
  log(`üîë Token recibido: ${token || 'ninguno'}`);
  
  // Verificar que el token coincida con el configurado
  const expectedToken = process.env.WEBHOOK_TOKEN;
  
  if (!expectedToken) {
    log('‚ö†Ô∏è No se ha configurado WEBHOOK_TOKEN en las variables de entorno');
    return false;
  }
  
  // Para desarrollo, permitir omitir la validaci√≥n del token
  if (process.env.NODE_ENV === 'development' && !token) {
    log('‚ö†Ô∏è Modo desarrollo: permitiendo solicitud sin token');
    return true;
  }
  
  if (token !== expectedToken) {
    log(`‚ùå Token inv√°lido recibido: ${token}`);
    log(`‚ùå Token esperado: ${expectedToken}`);
    return false;
  }
  
  return true;
}

import { revalidatePath, revalidateTag } from 'next/cache';

/**
 * Manejador para solicitudes POST al webhook
 */
export async function POST(request: NextRequest): Promise<NextResponse> {
  log('üì• Webhook recibido');
  log(`üí¨ URL: ${request.url}`);
  log(`üí¨ M√©todo: ${request.method}`);
  
  try {
    // Intentar obtener y loguear el cuerpo de la solicitud antes de la validaci√≥n
    // para tener m√°s informaci√≥n de depuraci√≥n
    interface WebhookBody {
      event?: string;
      model?: string;
      entry?: {
        id?: number | string;
        slug?: string;
        [key: string]: unknown;
      };
      [key: string]: unknown;
    }
    
    let body: WebhookBody = {};
    try {
      // Clonar la solicitud para poder leer el cuerpo m√∫ltiples veces
      const clonedRequest = request.clone();
      const jsonData = await clonedRequest.json();
      body = jsonData as WebhookBody;
      log(`üì¶ Datos recibidos: ${JSON.stringify(body, null, 2)}`);
    } catch (bodyError) {
      log(`‚ö†Ô∏è No se pudo leer el cuerpo de la solicitud: ${bodyError}`);
    }
    
    // Validar el webhook
    const isValid = await validateWebhook(request);
    
    if (!isValid) {
      log('üö´ Webhook rechazado: token inv√°lido');
      return NextResponse.json({ error: 'Token inv√°lido' }, { status: 401 });
    }
    
    // Si no pudimos leer el cuerpo antes, intentarlo de nuevo
    if (Object.keys(body).length === 0) {
      try {
        const jsonData = await request.json();
        body = jsonData as WebhookBody;
        log(`üì¶ Datos recibidos (segundo intento): ${JSON.stringify(body, null, 2)}`);
      } catch (bodyError) {
        log(`‚ö†Ô∏è No se pudo leer el cuerpo de la solicitud (segundo intento): ${bodyError}`);
        // Continuar de todos modos, para desarrollo
        if (process.env.NODE_ENV === 'development') {
          log('‚ö†Ô∏è Modo desarrollo: revalidando todas las p√°ginas');
          
          // Revalidar p√°ginas principales
          revalidatePath('/');
          revalidatePath('/news');
          revalidateTag('articles');
          revalidateTag('home');
          
          return NextResponse.json({ 
            success: true, 
            revalidated: true,
            message: 'P√°ginas revalidadas (modo desarrollo, sin cuerpo)' 
          });
        } else {
          return NextResponse.json({ 
            error: 'No se pudo leer el cuerpo de la solicitud', 
            details: String(bodyError) 
          }, { status: 400 });
        }
      }
    }
    
    // Verificar el tipo de evento (creaci√≥n o actualizaci√≥n de art√≠culo)
    const event = body.event;
    const model = body.model;
    let articleSlug = '';
    
    // Intentar obtener el slug del art√≠culo si est√° disponible
    if (body.entry && body.entry.slug) {
      articleSlug = body.entry.slug;
      log(`üìÑ Slug del art√≠culo: ${articleSlug}`);
    }
    
    // En modo desarrollo, ser m√°s permisivo con los eventos
    if (process.env.NODE_ENV === 'development') {
      log('‚úÖ Modo desarrollo: revalidando todas las p√°ginas');
      
      // Revalidar p√°ginas principales
      revalidatePath('/');
      revalidatePath('/news');
      revalidateTag('articles');
      revalidateTag('home');
      
      // Si tenemos un slug espec√≠fico, revalidar esa p√°gina tambi√©n
      if (articleSlug) {
        revalidatePath(`/news/${articleSlug}`);
        revalidateTag(`article-${articleSlug}`);
      }
      
      return NextResponse.json({ 
        success: true, 
        revalidated: true,
        message: 'P√°ginas revalidadas (modo desarrollo)' 
      });
    }
    
    // En producci√≥n, verificar el tipo de evento
    if (
      (event === 'entry.create' || event === 'entry.update' || 
       event === 'entry.publish' || event === 'entry.unpublish') && 
      (model === 'article' || model === 'articles')
    ) {
      log('‚úÖ Evento v√°lido para revalidaci√≥n');
      
      // Revalidar p√°ginas principales que muestran listas de art√≠culos
      revalidatePath('/');
      revalidatePath('/news');
      revalidateTag('articles');
      revalidateTag('home');
      
      // Si tenemos un slug espec√≠fico, revalidar esa p√°gina tambi√©n
      if (articleSlug) {
        revalidatePath(`/news/${articleSlug}`);
        revalidateTag(`article-${articleSlug}`);
        log(`‚úÖ Revalidada p√°gina espec√≠fica: /news/${articleSlug}`);
      }
      
      return NextResponse.json({ 
        success: true, 
        revalidated: true,
        message: 'P√°ginas revalidadas exitosamente',
        paths: articleSlug ? ['/', '/news', `/news/${articleSlug}`] : ['/', '/news']
      });
    } else {
      log(`‚ÑπÔ∏è Evento ignorado: ${event} para modelo ${model}`);
      return NextResponse.json({ 
        success: true, 
        message: 'Evento recibido pero no requiere revalidaci√≥n' 
      });
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    log(`‚ùå Error en el webhook: ${errorMessage}`);
    
    return NextResponse.json({ 
      error: 'Error interno del servidor', 
      details: errorMessage 
    }, { status: 500 });
  }
}

/**
 * Manejador para solicitudes GET al webhook (para pruebas)
 */
export async function GET(request: NextRequest): Promise<NextResponse> {
  log('üì• Solicitud GET al webhook (prueba)');
  
  // Validar el webhook
  const isValid = await validateWebhook(request);
  
  if (!isValid) {
    log('üö´ Prueba de webhook rechazada: token inv√°lido');
    return NextResponse.json({ error: 'Token inv√°lido' }, { status: 401 });
  }
  
  return NextResponse.json({ 
    success: true, 
    message: 'Webhook configurado correctamente',
    timestamp: new Date().toISOString()
  });
}
